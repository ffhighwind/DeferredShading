/*
* SDX Keyboard class
*
* Copyright (c) 2013 Wesley Hamilton
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/

#pragma once
#ifndef SDX_KEYBOARD_HPP
#define SDX_KEYBOARD_HPP

#include <SDL_scancode.h>
#include <SDL_events.h>
#include <bitset>
#include <functional>

#ifdef OUT
#undef OUT
#endif

#ifdef DELETE
#undef DELETE
#endif

namespace sdx {

enum class Key
{
	UNKNOWN = SDL_SCANCODE_UNKNOWN,

	// These values are from usage page 0x07 (USB keyboard page).
	A = SDL_SCANCODE_A,
	B = SDL_SCANCODE_B,
	C = SDL_SCANCODE_C,
	D = SDL_SCANCODE_D,
	E = SDL_SCANCODE_E,
	F = SDL_SCANCODE_F,
	G = SDL_SCANCODE_G,
	H = SDL_SCANCODE_H,
	I = SDL_SCANCODE_I,
	J = SDL_SCANCODE_J,
	K = SDL_SCANCODE_K,
	L = SDL_SCANCODE_L,
	M = SDL_SCANCODE_M,
	N = SDL_SCANCODE_N,
	O = SDL_SCANCODE_O,
	P = SDL_SCANCODE_P,
	Q = SDL_SCANCODE_Q,
	R = SDL_SCANCODE_R,
	S = SDL_SCANCODE_S,
	T = SDL_SCANCODE_T,
	U = SDL_SCANCODE_U,
	V = SDL_SCANCODE_V,
	W = SDL_SCANCODE_W,
	X = SDL_SCANCODE_X,
	Y = SDL_SCANCODE_Y,
	Z = SDL_SCANCODE_Z,

	_1 = SDL_SCANCODE_1,
	_2 = SDL_SCANCODE_2,
	_3 = SDL_SCANCODE_3,
	_4 = SDL_SCANCODE_4,
	_5 = SDL_SCANCODE_5,
	_6 = SDL_SCANCODE_6,
	_7 = SDL_SCANCODE_7,
	_8 = SDL_SCANCODE_8,
	_9 = SDL_SCANCODE_9,
	_0 = SDL_SCANCODE_0,

	RETURN = SDL_SCANCODE_RETURN,
	ESCAPE = SDL_SCANCODE_ESCAPE,
	BACKSPACE = SDL_SCANCODE_BACKSPACE,
	TAB = SDL_SCANCODE_TAB,
	SPACE = SDL_SCANCODE_SPACE,

	MINUS = SDL_SCANCODE_MINUS,
	EQUALS = SDL_SCANCODE_EQUALS,
	LEFTBRACKET = SDL_SCANCODE_LEFTBRACKET,
	RIGHTBRACKET = SDL_SCANCODE_RIGHTBRACKET,
	BACKSLASH = SDL_SCANCODE_BACKSLASH, /**< Located at the lower left of the return
	*   key on ISO keyboards and at the right end
	*   of the QWERTY row on ANSI keyboards.
	*   Produces REVERSE SOLIDUS (backslash) and
	*   VERTICAL LINE in a US layout, REVERSE
	*   SOLIDUS and VERTICAL LINE in a UK Mac
	*   layout, NUMBER SIGN and TILDE in a UK
	*   Windows layout, DOLLAR SIGN and POUND SIGN
	*   in a Swiss German layout, NUMBER SIGN and
	*   APOSTROPHE in a German layout, GRAVE
	*   ACCENT and POUND SIGN in a French Mac
	*   layout, and ASTERISK and MICRO SIGN in a
	*   French Windows layout.
	*/
	NONUSHASH = SDL_SCANCODE_NONUSHASH, /**< ISO USB keyboards actually use this code
	*   instead of 49 for the same key, but all
	*   OSes I've seen treat the two codes
	*   identically. So, as an implementor, unless
	*   your keyboard generates both of those
	*   codes and your OS treats them differently,
	*   you should generate BACKSLASH = SDL_SCANCODE_BACKSLASH
	*   instead of this code. As a user, you
	*   should not rely on this code because SDL
	*   will never generate it with most (all?)
	*   keyboards.
	*/
	SEMICOLON = SDL_SCANCODE_SEMICOLON,
	APOSTROPHE = SDL_SCANCODE_APOSTROPHE,
	GRAVE = SDL_SCANCODE_GRAVE, /**< Located in the top left corner (on both ANSI
	*   and ISO keyboards). Produces GRAVE ACCENT and
	*   TILDE in a US Windows layout and in US and UK
	*   Mac layouts on ANSI keyboards, GRAVE ACCENT
	*   and NOT SIGN in a UK Windows layout, SECTION
	*   SIGN and PLUS-MINUS SIGN in US and UK Mac
	*   layouts on ISO keyboards, SECTION SIGN and
	*   DEGREE SIGN in a Swiss German layout (Mac:
	*   only on ISO keyboards), CIRCUMFLEX ACCENT and
	*   DEGREE SIGN in a German layout (Mac: only on
	*   ISO keyboards), SUPERSCRIPT TWO and TILDE in a
	*   French Windows layout, COMMERCIAL AT and
	*   NUMBER SIGN in a French Mac layout on ISO
	*   keyboards, and LESS-THAN SIGN and GREATER-THAN
	*   SIGN in a Swiss German, German, or French Mac
	*   layout on ANSI keyboards.
	*/

	COMMA = SDL_SCANCODE_COMMA,
	PERIOD = SDL_SCANCODE_PERIOD,
	SLASH = SDL_SCANCODE_SLASH,
	CAPSLOCK = SDL_SCANCODE_CAPSLOCK,

	F1 = SDL_SCANCODE_F1,
	F2 = SDL_SCANCODE_F2,
	F3 = SDL_SCANCODE_F3,
	F4 = SDL_SCANCODE_F4,
	F5 = SDL_SCANCODE_F5,
	F6 = SDL_SCANCODE_F6,
	F7 = SDL_SCANCODE_F7,
	F8 = SDL_SCANCODE_F8,
	F9 = SDL_SCANCODE_F9,
	F10 = SDL_SCANCODE_F10,
	F11 = SDL_SCANCODE_F11,
	F12 = SDL_SCANCODE_F12,

	PRINTSCREEN = SDL_SCANCODE_PRINTSCREEN,
	SCROLLLOCK = SDL_SCANCODE_SCROLLLOCK,
	PAUSE = SDL_SCANCODE_PAUSE,
	INSERT = SDL_SCANCODE_INSERT, // insert on PC, help on some Mac keyboards (but sends code 73, not 117)
	HOME = SDL_SCANCODE_HOME,
	PAGEUP = SDL_SCANCODE_PAGEUP,
	DELETE = SDL_SCANCODE_DELETE,
	END = SDL_SCANCODE_END,
	PAGEDOWN = SDL_SCANCODE_PAGEDOWN,
	RIGHT = SDL_SCANCODE_RIGHT,
	LEFT = SDL_SCANCODE_LEFT,
	DOWN = SDL_SCANCODE_DOWN,
	UP = SDL_SCANCODE_UP,

	NUMLOCKCLEAR = SDL_SCANCODE_NUMLOCKCLEAR, // num lock on PC, clear on Mac keyboards
	KP_DIVIDE = SDL_SCANCODE_KP_DIVIDE,
	KP_MULTIPLY = SDL_SCANCODE_KP_MULTIPLY,
	KP_MINUS = SDL_SCANCODE_KP_MINUS,
	KP_PLUS = SDL_SCANCODE_KP_PLUS,
	KP_ENTER = SDL_SCANCODE_KP_ENTER,
	KP_1 = SDL_SCANCODE_KP_1,
	KP_2 = SDL_SCANCODE_KP_2,
	KP_3 = SDL_SCANCODE_KP_3,
	KP_4 = SDL_SCANCODE_KP_4,
	KP_5 = SDL_SCANCODE_KP_5,
	KP_6 = SDL_SCANCODE_KP_6,
	KP_7 = SDL_SCANCODE_KP_7,
	KP_8 = SDL_SCANCODE_KP_8,
	KP_9 = SDL_SCANCODE_KP_9,
	KP_0 = SDL_SCANCODE_KP_0,
	KP_PERIOD = SDL_SCANCODE_KP_PERIOD,

	NONUSBACKSLASH = SDL_SCANCODE_NONUSBACKSLASH, /**< This is the additional key that ISO
	*   keyboards have over ANSI ones,
	*   located between left shift and Y.
	*   Produces GRAVE ACCENT and TILDE in a
	*   US or UK Mac layout, REVERSE SOLIDUS
	*   (backslash) and VERTICAL LINE in a
	*   US or UK Windows layout, and
	*   LESS-THAN SIGN and GREATER-THAN SIGN
	*   in a Swiss German, German, or French
	*   layout. */

	APPLICATION = SDL_SCANCODE_APPLICATION, // windows contextual menu, compose
	POWER = SDL_SCANCODE_POWER, /**< The USB document says this is a status flag,
	*   not a physical key - but some Mac keyboards
	*   do have a power key. */
	KP_EQUALS = SDL_SCANCODE_KP_EQUALS,
	F13 = SDL_SCANCODE_F13,
	F14 = SDL_SCANCODE_F14,
	F15 = SDL_SCANCODE_F15,
	F16 = SDL_SCANCODE_F16,
	F17 = SDL_SCANCODE_F17,
	F18 = SDL_SCANCODE_F18,
	F19 = SDL_SCANCODE_F19,
	F20 = SDL_SCANCODE_F20,
	F21 = SDL_SCANCODE_F21,
	F22 = SDL_SCANCODE_F22,
	F23 = SDL_SCANCODE_F23,
	F24 = SDL_SCANCODE_F24,
	EXECUTE = SDL_SCANCODE_EXECUTE,
	HELP = SDL_SCANCODE_HELP,
	MENU = SDL_SCANCODE_MENU,
	SELECT = SDL_SCANCODE_SELECT,
	STOP = SDL_SCANCODE_STOP,
	AGAIN = SDL_SCANCODE_AGAIN,   // redo
	UNDO = SDL_SCANCODE_UNDO,
	CUT = SDL_SCANCODE_CUT,
	COPY = SDL_SCANCODE_COPY,
	PASTE = SDL_SCANCODE_PASTE,
	FIND = SDL_SCANCODE_FIND,
	MUTE = SDL_SCANCODE_MUTE,
	VOLUMEUP = SDL_SCANCODE_VOLUMEUP,
	VOLUMEDOWN = SDL_SCANCODE_VOLUMEDOWN,
	/* not sure whether there's a reason to enable these */
	/*     LOCKINGCAPSLOCK = SDL_SCANCODE_LOCKINGCAPSLOCK,  */
	/*     LOCKINGNUMLOCK = SDL_SCANCODE_LOCKINGNUMLOCK, */
	/*     LOCKINGSCROLLLOCK = SDL_SCANCODE_LOCKINGSCROLLLOCK, */
	KP_COMMA = SDL_SCANCODE_KP_COMMA,
	KP_EQUALSAS400 = SDL_SCANCODE_KP_EQUALSAS400,

	INTERNATIONAL1 = SDL_SCANCODE_INTERNATIONAL1, // used on Asian keyboards, see footnotes in USB doc
	INTERNATIONAL2 = SDL_SCANCODE_INTERNATIONAL2,
	INTERNATIONAL3 = SDL_SCANCODE_INTERNATIONAL3, // Yen
	INTERNATIONAL4 = SDL_SCANCODE_INTERNATIONAL4,
	INTERNATIONAL5 = SDL_SCANCODE_INTERNATIONAL5,
	INTERNATIONAL6 = SDL_SCANCODE_INTERNATIONAL6,
	INTERNATIONAL7 = SDL_SCANCODE_INTERNATIONAL7,
	INTERNATIONAL8 = SDL_SCANCODE_INTERNATIONAL8,
	INTERNATIONAL9 = SDL_SCANCODE_INTERNATIONAL9,
	LANG1 = SDL_SCANCODE_LANG1, // Hangul/English toggle
	LANG2 = SDL_SCANCODE_LANG2, // Hanja conversion
	LANG3 = SDL_SCANCODE_LANG3, // Katakana
	LANG4 = SDL_SCANCODE_LANG4, // Hiragana
	LANG5 = SDL_SCANCODE_LANG5, // Zenkaku/Hankaku 
	LANG6 = SDL_SCANCODE_LANG6,
	LANG7 = SDL_SCANCODE_LANG7,
	LANG8 = SDL_SCANCODE_LANG8,
	LANG9 = SDL_SCANCODE_LANG9,

	ALTERASE = SDL_SCANCODE_ALTERASE, // Erase-Eaze
	SYSREQ = SDL_SCANCODE_SYSREQ,
	CANCEL = SDL_SCANCODE_CANCEL,
	CLEAR = SDL_SCANCODE_CLEAR,
	PRIOR = SDL_SCANCODE_PRIOR,
	RETURN2 = SDL_SCANCODE_RETURN2,
	SEPARATOR = SDL_SCANCODE_SEPARATOR,
	OUT = SDL_SCANCODE_OUT,
	OPER = SDL_SCANCODE_OPER,
	CLEARAGAIN = SDL_SCANCODE_CLEARAGAIN,
	CRSEL = SDL_SCANCODE_CRSEL,
	EXSEL = SDL_SCANCODE_EXSEL,

	KP_00 = SDL_SCANCODE_KP_00,
	KP_000 = SDL_SCANCODE_KP_000,
	THOUSANDSSEPARATOR = SDL_SCANCODE_THOUSANDSSEPARATOR,
	DECIMALSEPARATOR = SDL_SCANCODE_DECIMALSEPARATOR,
	CURRENCYUNIT = SDL_SCANCODE_CURRENCYUNIT,
	CURRENCYSUBUNIT = SDL_SCANCODE_CURRENCYSUBUNIT,
	KP_LEFTPAREN = SDL_SCANCODE_KP_LEFTPAREN,
	KP_RIGHTPAREN = SDL_SCANCODE_KP_RIGHTPAREN,
	KP_LEFTBRACE = SDL_SCANCODE_KP_LEFTBRACE,
	KP_RIGHTBRACE = SDL_SCANCODE_KP_RIGHTBRACE,
	KP_TAB = SDL_SCANCODE_KP_TAB,
	KP_BACKSPACE = SDL_SCANCODE_KP_BACKSPACE,
	KP_A = SDL_SCANCODE_KP_A,
	KP_B = SDL_SCANCODE_KP_B,
	KP_C = SDL_SCANCODE_KP_C,
	KP_D = SDL_SCANCODE_KP_D,
	KP_E = SDL_SCANCODE_KP_E,
	KP_F = SDL_SCANCODE_KP_F,
	KP_XOR = SDL_SCANCODE_KP_XOR,
	KP_POWER = SDL_SCANCODE_KP_POWER,
	KP_PERCENT = SDL_SCANCODE_KP_PERCENT,
	KP_LESS = SDL_SCANCODE_KP_LESS,
	KP_GREATER = SDL_SCANCODE_KP_GREATER,
	KP_AMPERSAND = SDL_SCANCODE_KP_AMPERSAND,
	KP_DBLAMPERSAND = SDL_SCANCODE_KP_DBLAMPERSAND,
	KP_VERTICALBAR = SDL_SCANCODE_KP_VERTICALBAR,
	KP_DBLVERTICALBAR = SDL_SCANCODE_KP_DBLVERTICALBAR,
	KP_COLON = SDL_SCANCODE_KP_COLON,
	KP_HASH = SDL_SCANCODE_KP_HASH,
	KP_SPACE = SDL_SCANCODE_KP_SPACE,
	KP_AT = SDL_SCANCODE_KP_AT,
	KP_EXCLAM = SDL_SCANCODE_KP_EXCLAM,
	KP_MEMSTORE = SDL_SCANCODE_KP_MEMSTORE,
	KP_MEMRECALL = SDL_SCANCODE_KP_MEMRECALL,
	KP_MEMCLEAR = SDL_SCANCODE_KP_MEMCLEAR,
	KP_MEMADD = SDL_SCANCODE_KP_MEMADD,
	KP_MEMSUBTRACT = SDL_SCANCODE_KP_MEMSUBTRACT,
	KP_MEMMULTIPLY = SDL_SCANCODE_KP_MEMMULTIPLY,
	KP_MEMDIVIDE = SDL_SCANCODE_KP_MEMDIVIDE,
	KP_PLUSMINUS = SDL_SCANCODE_KP_PLUSMINUS,
	KP_CLEAR = SDL_SCANCODE_KP_CLEAR,
	KP_CLEARENTRY = SDL_SCANCODE_KP_CLEARENTRY,
	KP_BINARY = SDL_SCANCODE_KP_BINARY,
	KP_OCTAL = SDL_SCANCODE_KP_OCTAL,
	KP_DECIMAL = SDL_SCANCODE_KP_DECIMAL,
	KP_HEXADECIMAL = SDL_SCANCODE_KP_HEXADECIMAL,

	LCTRL = SDL_SCANCODE_LCTRL,
	LSHIFT = SDL_SCANCODE_LSHIFT,
	LALT = SDL_SCANCODE_LALT, // alt, option
	LGUI = SDL_SCANCODE_LGUI, // windows, command (apple), meta
	RCTRL = SDL_SCANCODE_RCTRL,
	RSHIFT = SDL_SCANCODE_RSHIFT,
	RALT = SDL_SCANCODE_RALT, // alt gr, option
	RGUI = SDL_SCANCODE_RGUI, // windows, command (apple), meta

	MODE = SDL_SCANCODE_MODE,


	AUDIONEXT = SDL_SCANCODE_AUDIONEXT,
	AUDIOPREV = SDL_SCANCODE_AUDIOPREV,
	AUDIOSTOP = SDL_SCANCODE_AUDIOSTOP,
	AUDIOPLAY = SDL_SCANCODE_AUDIOPLAY,
	AUDIOMUTE = SDL_SCANCODE_AUDIOMUTE,
	MEDIASELECT = SDL_SCANCODE_MEDIASELECT,
	WWW = SDL_SCANCODE_WWW,
	MAIL = SDL_SCANCODE_MAIL,
	CALCULATOR = SDL_SCANCODE_CALCULATOR,
	COMPUTER = SDL_SCANCODE_COMPUTER,
	AC_SEARCH = SDL_SCANCODE_AC_SEARCH,
	AC_HOME = SDL_SCANCODE_AC_HOME,
	AC_BACK = SDL_SCANCODE_AC_BACK,
	AC_FORWARD = SDL_SCANCODE_AC_FORWARD,
	AC_STOP = SDL_SCANCODE_AC_STOP,
	AC_REFRESH = SDL_SCANCODE_AC_REFRESH,
	AC_BOOKMARKS = SDL_SCANCODE_AC_BOOKMARKS,

	BRIGHTNESSDOWN = SDL_SCANCODE_BRIGHTNESSDOWN,
	BRIGHTNESSUP = SDL_SCANCODE_BRIGHTNESSUP,
	DISPLAYSWITCH = SDL_SCANCODE_DISPLAYSWITCH, // display mirroring/dual display switch, video mode switch
	KBDILLUMTOGGLE = SDL_SCANCODE_KBDILLUMTOGGLE,
	KBDILLUMDOWN = SDL_SCANCODE_KBDILLUMDOWN,
	KBDILLUMUP = SDL_SCANCODE_KBDILLUMUP,
	EJECT = SDL_SCANCODE_EJECT,
	SLEEP = SDL_SCANCODE_SLEEP,

	APP1 = SDL_SCANCODE_APP1,
	APP2 = SDL_SCANCODE_APP2,

	NUM_SCANCODES = SDL_NUM_SCANCODES // not a key, just marks the number of scancodes for array bounds
};

class Keyboard
{
public:
	static void Update();
	// Calls the event callbacks.
	static bool HandleEvent(const SDL_Event &e);
	static bool IsKeyDown(Key key);
	static bool IsKeyPressed(Key key);
	static bool IsKeyReleased(Key key);
	// Event handler callback for key presses (nullptr to disable)
	static std::function<void(Key key)> OnPress;
	static std::function<void(Key key)> OnRelease;

private:
	Keyboard() { } // static class
	static std::bitset<SDL_NUM_SCANCODES> _keyChanged;
	static const Uint8 *_keyState;
};


inline void Keyboard::Update()
{
	_keyState = SDL_GetKeyboardState(NULL);
	_keyChanged.reset();
}

inline bool Keyboard::IsKeyDown(Key key)
{
	return _keyState[(SDL_Scancode)key] != 0;
}

inline bool Keyboard::IsKeyPressed(Key key)
{
	return _keyChanged[(int)key] && _keyState[(SDL_Scancode)key];
}

inline bool Keyboard::IsKeyReleased(Key key)
{
	return _keyChanged[(int)key] && !_keyState[(SDL_Scancode)key];
}

} // namespace sdx
#endif // SDX_KEYBOARD_HPP